{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.score = 0;\n        this.status = \"playing\";\n        this.fillOutRandomCell(this.generateNumber());\n        this.fillOutRandomCell(this.generateNumber());\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        // this.start();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    filterZero(row) {\n        return row.filter((val)=>val !== 0);\n    }\n    slide(row) {\n        let modifiedRow = this.filterZero(row);\n        for(let i = 0; i < modifiedRow.length - 1; i++)if (modifiedRow[i] === modifiedRow[i + 1]) {\n            modifiedRow[i] *= 2;\n            modifiedRow[i + 1] = 0;\n            this.score += modifiedRow[i];\n        }\n        modifiedRow = this.filterZero(modifiedRow);\n        while(modifiedRow.length < 4)modifiedRow.push(0);\n        return modifiedRow;\n    }\n    moveLeft() {\n        if (this.status === \"playing\") for(let r = 0; r < 4; r++){\n            let row = this.state[r];\n            row = this.slide(row);\n            this.state[r] = row;\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") for(let r = 0; r < 4; r++){\n            let row = this.state[r];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.state[r] = row;\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") for(let c = 0; c < 4; c++){\n            let tempRow = [];\n            for(let i = 0; i < 4; i++)tempRow.push(this.state[i][c]);\n            tempRow = this.slide(tempRow);\n            for(let j = 0; j < 4; j++)this.state[j][c] = tempRow[j];\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") for(let c = 0; c < 4; c++){\n            let tempRow = [];\n            for(let i = 0; i < 4; i++)tempRow.push(this.state[i][c]);\n            tempRow.reverse();\n            tempRow = this.slide(tempRow);\n            tempRow.reverse();\n            for(let j = 0; j < 4; j++)this.state[j][c] = tempRow[j];\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    // Add your own methods here\n    // return 2 or 4. 4 probability is 10%\n    generateNumber() {\n        return Math.random() >= 0.9 ? 4 : 2;\n    }\n    // return number between 0 and 15\n    getCellValue() {\n        return Math.floor(Math.random() * 16);\n    }\n    fillOutRandomCell(value) {\n        // getting array of empty cells\n        let emptyCells = this.getEmptyCells();\n        if (emptyCells.length > 0) {\n            const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n            const randomCell = emptyCells[randomCellIndex];\n            this.state[Math.floor(randomCell / 4)][randomCell % 4] = value;\n            emptyCells = this.getEmptyCells();\n        }\n        if (emptyCells.length === 0) {\n            if (!this.isMovePossible()) this.status = \"lose\";\n        }\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        const flatState = this.getState().flat();\n        for(let i = 0; i < flatState.length; i++)if (flatState[i] === 0) emptyCells.push(i);\n        return emptyCells;\n    }\n    updateStatus() {\n        const win = this.state.filter((e)=>e === 2048);\n        if (win.length >= 1) this.status = \"win\";\n    }\n    isMovePossible() {\n        let result = false;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 3; j++){\n            // checking rows (move left|right)\n            if (this.state[i][j] === this.state[i][j + 1]) result = true;\n            // checking columns (move up|down)\n            if (this.state[j][i] === this.state[j + 1][i]) result = true;\n        }\n        return result;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\n$09e991522ca7e64e$var$renderGameField();\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", (e)=>{\n    if (e.target.classList.contains(\"start\")) $09e991522ca7e64e$var$game.start();\n    else if (e.target.classList.contains(\"restart\")) $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$resetControls();\n    $09e991522ca7e64e$var$renderGameField($09e991522ca7e64e$var$game.getState());\n});\nfunction $09e991522ca7e64e$var$resetControls() {\n    document.querySelector(\".game-score\").innerHTML = 0;\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"idle\":\n            $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n            $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n            $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n            document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$control);\n            break;\n        case \"playing\":\n            $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n            $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n            $09e991522ca7e64e$var$startButton.innerHTML = \"Restart\";\n            document.addEventListener(\"keydown\", $09e991522ca7e64e$var$control);\n            break;\n    }\n    document.querySelectorAll(\".message\").forEach((e)=>e.classList.add(\"hidden\"));\n}\nfunction $09e991522ca7e64e$var$control(e) {\n    const beforeState = $09e991522ca7e64e$var$game.getState().map((row)=>[\n            ...row\n        ]);\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    if (beforeState.toString() !== $09e991522ca7e64e$var$game.getState().toString()) {\n        $09e991522ca7e64e$var$game.fillOutRandomCell($09e991522ca7e64e$var$game.generateNumber());\n        $09e991522ca7e64e$var$renderGameField();\n    }\n}\nfunction $09e991522ca7e64e$var$renderGameField() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const state = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    document.querySelector(\".game-score\").innerHTML = score;\n    for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n        const number = state[i][j];\n        const cell = $09e991522ca7e64e$var$gameField.rows[i].cells[j];\n        cell.innerHTML = number || \"\";\n        cell.classList = \"field-cell\";\n        if (number) cell.classList.add(`field-cell--${number}`);\n    }\n    $09e991522ca7e64e$var$game.updateStatus();\n    if (gameStatus === \"lose\" || gameStatus === \"win\") {\n        document.querySelector(`.message-${gameStatus}`).classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$control);\n    }\n}\n\n\n//# sourceMappingURL=index.b1f9c11e.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.button');\nconst gameField = document.querySelector('.game-field');\n\nrenderGameField();\n\nstartButton.addEventListener('click', (e) => {\n  if (e.target.classList.contains('start')) {\n    game.start();\n  } else if (e.target.classList.contains('restart')) {\n    game.restart();\n  }\n  resetControls();\n  renderGameField(game.getState());\n});\n\nfunction resetControls() {\n  document.querySelector('.game-score').innerHTML = 0;\n\n  switch (game.getStatus()) {\n    case 'idle':\n      startButton.classList.remove('restart');\n      startButton.classList.add('start');\n      startButton.innerHTML = 'Start';\n      document.removeEventListener('keydown', control);\n      break;\n\n    case 'playing':\n      startButton.classList.remove('start');\n      startButton.classList.add('restart');\n      startButton.innerHTML = 'Restart';\n      document.addEventListener('keydown', control);\n      break;\n  }\n\n  document\n    .querySelectorAll('.message')\n    .forEach((e) => e.classList.add('hidden'));\n}\n\nfunction control(e) {\n  const beforeState = game.getState().map((row) => [...row]);\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  if (beforeState.toString() !== game.getState().toString()) {\n    game.fillOutRandomCell(game.generateNumber());\n    renderGameField();\n  }\n}\n\nfunction renderGameField() {\n  const gameStatus = game.getStatus();\n  const state = game.getState();\n  const score = game.getScore();\n\n  document.querySelector('.game-score').innerHTML = score;\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      const number = state[i][j];\n      const cell = gameField.rows[i].cells[j];\n\n      cell.innerHTML = number || '';\n      cell.classList = 'field-cell';\n\n      if (number) {\n        cell.classList.add(`field-cell--${number}`);\n      }\n    }\n  }\n  game.updateStatus();\n\n  if (gameStatus === 'lose' || gameStatus === 'win') {\n    document.querySelector(`.message-${gameStatus}`).classList.remove('hidden');\n    document.removeEventListener('keydown', control);\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.score = 0;\n    this.status = 'playing';\n\n    this.fillOutRandomCell(this.generateNumber());\n    this.fillOutRandomCell(this.generateNumber());\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    // this.start();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  filterZero(row) {\n    return row.filter((val) => val !== 0);\n  }\n\n  slide(row) {\n    let modifiedRow = this.filterZero(row);\n\n    for (let i = 0; i < modifiedRow.length - 1; i++) {\n      if (modifiedRow[i] === modifiedRow[i + 1]) {\n        modifiedRow[i] *= 2;\n        modifiedRow[i + 1] = 0;\n        this.score += modifiedRow[i];\n      }\n    }\n\n    modifiedRow = this.filterZero(modifiedRow);\n\n    while (modifiedRow.length < 4) {\n      modifiedRow.push(0);\n    }\n\n    return modifiedRow;\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      for (let r = 0; r < 4; r++) {\n        let row = this.state[r];\n\n        row = this.slide(row);\n        this.state[r] = row;\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      for (let r = 0; r < 4; r++) {\n        let row = this.state[r];\n\n        row.reverse();\n        row = this.slide(row);\n        row.reverse();\n        this.state[r] = row;\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      for (let c = 0; c < 4; c++) {\n        let tempRow = [];\n\n        for (let i = 0; i < 4; i++) {\n          tempRow.push(this.state[i][c]);\n        }\n\n        tempRow = this.slide(tempRow);\n\n        for (let j = 0; j < 4; j++) {\n          this.state[j][c] = tempRow[j];\n        }\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      for (let c = 0; c < 4; c++) {\n        let tempRow = [];\n\n        for (let i = 0; i < 4; i++) {\n          tempRow.push(this.state[i][c]);\n        }\n        tempRow.reverse();\n        tempRow = this.slide(tempRow);\n        tempRow.reverse();\n\n        for (let j = 0; j < 4; j++) {\n          this.state[j][c] = tempRow[j];\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  // Add your own methods here\n\n  // return 2 or 4. 4 probability is 10%\n  generateNumber() {\n    return Math.random() >= 0.9 ? 4 : 2;\n  }\n\n  // return number between 0 and 15\n  getCellValue() {\n    return Math.floor(Math.random() * 16);\n  }\n\n  fillOutRandomCell(value) {\n    // getting array of empty cells\n    let emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length > 0) {\n      const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n      const randomCell = emptyCells[randomCellIndex];\n\n      this.state[Math.floor(randomCell / 4)][randomCell % 4] = value;\n      emptyCells = this.getEmptyCells();\n    }\n\n    if (emptyCells.length === 0) {\n      if (!this.isMovePossible()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n    const flatState = this.getState().flat();\n\n    for (let i = 0; i < flatState.length; i++) {\n      if (flatState[i] === 0) {\n        emptyCells.push(i);\n      }\n    }\n\n    return emptyCells;\n  }\n\n  updateStatus() {\n    const win = this.state.filter((e) => e === 2048);\n\n    if (win.length >= 1) {\n      this.status = 'win';\n    }\n  }\n\n  isMovePossible() {\n    let result = false;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 3; j++) {\n        // checking rows (move left|right)\n        if (this.state[i][j] === this.state[i][j + 1]) {\n          result = true;\n        }\n\n        // checking columns (move up|down)\n        if (this.state[j][i] === this.state[j + 1][i]) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","score","status","start","fillOutRandomCell","generateNumber","restart","filterZero","filter","val","slide","modifiedRow","i","length","push","moveLeft","r","moveRight","reverse","moveUp","c","tempRow","j","moveDown","getScore","getState","getStatus","Math","random","getCellValue","floor","value","emptyCells","getEmptyCells","randomCellIndex","randomCell","isMovePossible","flatState","flat","updateStatus","win","e","result","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$control","beforeState","key","toString","$09e991522ca7e64e$var$renderGameField","gameStatus","innerHTML","number","cell","rows","cells","classList","add","remove","removeEventListener","addEventListener","target","contains","$09e991522ca7e64e$var$resetControls","querySelectorAll","forEach"],"version":3,"file":"index.b1f9c11e.js.map"}